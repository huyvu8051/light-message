version: '3.8'
services:
#  sba:
#    container_name: sba
#    build:
#      context: .
#    ports:
#      - "8080:8080"    # App port
#      - "9010:9010"    # JMX port for VisualVM
#    environment:
#      - SPRING_PROFILES_ACTIVE=dev
#      - TOMCAT_MAX_THREADS=500
#      - TOMCAT_MAX_CONNECTIONS=10000
#      - TOMCAT_ACCEPT_COUNT=200
#      - TOMCAT_CONNECTION_TIMEOUT=30000
#      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/mydatabase
#      - SPRING_DATASOURCE_USERNAME=myuser
#      - SPRING_DATASOURCE_PASSWORD=secret
#      - SPRING_DATASOURCE_DRIVER-CLASS-NAME=org.postgresql.Driver
#    deploy:
#      resources:
#        limits:
#          cpus: "2"
#          memory: "1g"
#        reservations:
#          cpus: "1"
#          memory: "512m"
#    volumes:
#      - "./docker/tmp-hprof:/tmp"

#  light-message:
#    image: docker.io/library/light-message:0.0.1-SNAPSHOT
#    container_name: nsba
#    ports:
#      - "8080:8080"
#    environment:
#      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/mydatabase
#      - SERVER_TOMCAT_THREADS_MAX=4
#      - SPRING_DATA_JPA_REPOSITORIES_BOOTSTRAP_MODE=lazy

  postgres:
    container_name: postgres
    image: 'postgres:17.2'
    environment:
      - 'POSTGRES_DB=mydatabase'
      - 'POSTGRES_PASSWORD=secret'
      - 'POSTGRES_USER=myuser'
    ports:
      - '5432:5432'
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: "2.0"



#  schema-registry:
#    image: confluentinc/cp-schema-registry:7.5.0
#    depends_on:
#      - kafka
#    environment:
#      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'PLAINTEXT://kafka:9092'
#      SCHEMA_REGISTRY_HOST_NAME: 'schema-registry'
#      SCHEMA_REGISTRY_LISTENERS: 'http://0.0.0.0:8085'
#      SCHEMA_REGISTRY_LOG4J_ROOT_LOGLEVEL: 'INFO'


  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka
    ports:
      - "9092:9092"  # Kafka client connection port (from outside)
      - "9093:9093"  # Kafka controller port (internal communication)
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@kafka:9093"
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LOG_DIRS: /var/lib/kafka/data
      CLUSTER_ID: "QJwH8wqGTqGqXv0hFjMY9A"
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: "1.0"

  akhq:
    image: tchiotludo/akhq:0.25.1
    container_name: akhq
    depends_on:
      - kafka
    ports:
      - "8083:8080"  # Expose AKHQ web UI on port 8083
    environment:
      AKHQ_CONFIGURATION: |
        akhq:
          connections:
            my-cluster:
              properties:
                bootstrap.servers: "kafka:9092"  # Use internal Docker network address for Kafka
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: "1.0"

#  k6:
#    container_name: k6
#    image: grafana/k6:latest
#    environment:
#      BASE_URL: "http://sba:8080/api/v1"
#    volumes:
#      - ./k6/:/scripts/:ro
#
#    command: run /scripts/send_message.js

  redis:
    image: redis:6.2
    container_name: redis
    ports:
      - "6379:6379"


  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - --config.file=/etc/prometheus/prometheus.yml

  grafana:
    image: grafana/grafana-oss:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    depends_on:
      - prometheus
    volumes:
      - grafana-data:/var/lib/grafana
      - ./docker/grafana/datasources/:/etc/grafana/provisioning/datasources/
      - ./docker/grafana/dashboard.yaml:/etc/grafana/provisioning/dashboards/main.yaml
      - ./docker/grafana/dashboards:/var/lib/grafana/dashboards

volumes:
  grafana-data:

